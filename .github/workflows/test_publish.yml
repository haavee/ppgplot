name: Test Build and Publish

on:
  workflow_dispatch:  # Manual trigger
  push:
    branches:
      - test-pypi*  # 

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install cibuildwheel

      - name: Build wheels
        run: cibuildwheel --output-dir dist
        env:
          CIBW_BEFORE_ALL_LINUX: |
            (which apt || which yum || which dnf) &&
            ((yum install -y gcc make cairo-devel libX11-devel pkgconfig wget tar gzip) ||
             (apt-get update && apt-get install -y gcc make libcairo2-dev libx11-dev pkg-config wget tar gzip)) &&
            cd /tmp &&
            wget https://github.com/danieljprice/giza/archive/refs/tags/v1.4.2.tar.gz &&
            tar -xzf v1.4.2.tar.gz &&
            cd giza-1.4.2 &&
            export CFLAGS=-fPIC &&
            ./configure --prefix=/usr/local &&
            make &&
            make install &&
            ldconfig
          CIBW_BEFORE_ALL_MACOS: "brew install giza libx11 pkg-config"
          CIBW_ENVIRONMENT_LINUX: "PKG_CONFIG_PATH=/usr/local/lib/pkgconfig LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH"
          CIBW_ENVIRONMENT_MACOS: "MACOSX_DEPLOYMENT_TARGET=14.0 PKG_CONFIG_PATH=$(brew --prefix)/lib/pkgconfig DYLD_FALLBACK_LIBRARY_PATH=$(brew --prefix)/lib:$DYLD_FALLBACK_LIBRARY_PATH"
          CIBW_ARCHS_MACOS: "native"
          CIBW_TEST_COMMAND: >
            python -c 'import ppgplot; print("ok")'

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: python-pgplot-wheels-${{ matrix.os }}
          path: dist/

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build sdist
        run: python -m build --sdist

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: python-pgplot-sdist
          path: dist/*.tar.gz

  test_publish:
    name: Test Publish to Test PyPI
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/

      - name: Flatten artifacts
        run: |
          find dist/ -name "*.whl" -exec mv {} dist/ \;
          find dist/ -name "*.tar.gz" -exec mv {} dist/ \;
          find dist/ -mindepth 1 -type d -exec rm -rf {} + || true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Twine
        run: pip install twine

      - name: Verify distributions
        run: |
          ls -la dist/
          twine check dist/*

      - name: Publish to Test PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: twine upload --repository testpypi dist/*
